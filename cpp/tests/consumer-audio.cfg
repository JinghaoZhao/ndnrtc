// default config file for ndnrtc headless client

// general parameters
general = {
    log_level = "default";  // all, debug, stat, default, none
    log_file = "ndnrtc-client.log";
    log_path = "/tmp";

    use_fec = true; // [true | false] -- use Forward Error Correction
    use_avsync = true; // [true | false] -- enable synchronization between audio/video streams

    consumer_use_rtx = true; // [true | false] -- reissue timed out interests (late data cases)
    consumer_playback_skip_incomplete = true; // [true | false] -- indicates, whether incomplete frames should be skipped for playback
    
    ndnnetwork ={
        connect_host = "localhost";
        connect_port = 6363;
    };
};

// configuration for streams that will be fetched
consume = {
    basic = {
        audio = {
            interest_lifetime = 2000; // in millisecond
            jitter_size = 150; // minimal jitter buffer size in milliseconds
            buffer_size = 150; // buffer size in slots
            slot_size = 4000; // frame buffer's slot size in bytes (for assembling frames fetched from network)
        };
        // statistics to gather per stream
        // allowed statistics keywords can be found in statistics.h
        stat_gathering = ({
            name="buffer";  // file name prefix (complete filename will be 
                            // <name>-<clientname>-<stream_name>.stat)
            statistics= ("jitterPlay", "jitterTar", "dArr"); 
        },
        {
            name="playback";
            statistics= ("framesAcq","lambdaD","drdPrime");
        },
        {
            name="play";
            statistics= ("lambdaD","drdPrime","jitterTar","dArr");
        });
    };

    streams = (
    {
        type = "audio";
        session_prefix = "/ndn/edu/ucla/remap/ndnrtc/user/clientB";
        name = "sound";
        thread_to_fetch = "pcmu";
        segment_size = 1000;
    },
    {
        type = "audio";
        session_prefix = "/ndn/edu/ucla/remap/ndnrtc/user/clientC";
        name = "sound";
        thread_to_fetch = "pcmu";
        segment_size = 1000;
    });
};
